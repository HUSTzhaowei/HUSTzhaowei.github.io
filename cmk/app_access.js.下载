function getJSURL(regexp1) {
    for (let i = 0; i < document.scripts.length; i++) {
        if (regexp1.test(document.scripts[i].src)) {
            return document.scripts[i].src;
        }
    }
    return null;
}

var caspIocServerUrl = getJSURL(/app_access.js$/);
var caspIocApiUrl = caspIocServerUrl.replace("app_access.js","") + "api/";

function casp_ioc_GetPropByPath(obj, path) {
    var tempObj = obj;
    path = path.replace(/\[(\w+)\]/g, '.$1');
    path = path.replace(/^\./, '');

    var keyArr = path.split('.');
    var i = 0;
    for (var len = keyArr.length; i < len - 1; ++i) {
        if (!tempObj) break;
        var key = keyArr[i];
        if (key in tempObj) {
            tempObj = tempObj[key];
        } else {
            break;
        }
    }
    return tempObj ? tempObj[keyArr[i]] : null
};

/**
 * 获取用户信息
 * @param win
 */
function casp_ioc_GetUserInfo(win) {
    var userId = win.userId || win.USERID || win.currentUserId,
        userName = win.userName || win.USERNAME || win.currentUserName;
    if (!userId && win.USER_INFO && win.USER_INFO.info && win.USER_INFO.info.length > 2) {
        userId = win.USER_INFO.info[0];
        userName = userName || win.USER_INFO.info[1];
    }
    // userId未获取到
    if (!userId) {
        // 尝试从pageMeta中获取
        var params = (win.pageMeta || {}).params || {};
        userId = params.USERID || params.userId;
        userName = userName || params.USERNAME || params.userName;
        if (!userId) {
            function getInfo(obj) {
                if (!obj) return;
                // 存在对应路径，尝试获取
                if (casp_ioc_GetPropByPath(obj, 'HEADER.userInfo.info')) {
                    var info = obj.HEADER.userInfo.info;
                    if (info.length == 2) {
                        userId = info[1];
                        userName = userName || info[0];
                    } else if (info.length > 2) {
                        userId = info[0];
                        // 信息可能存在问题
                        userName = userName || info[1];
                    }
                }
            }

            // 尝试APPC_CONFIG中获取
            getInfo(win.APP_CONFIG);
            if (!userId) {
                // 尝试xgconfig中获取
                getInfo(win.xgconfig);
            }
        }
    }
    if (userId) {
        return {
            userId: userId,
            userName: userName
        };
    }

    if (win.localStorage && win.localStorage.ampUserId) {
        return {
            userId: win.localStorage.ampUserId
        }
    }
    // 向下找一层
    //if (win.self == win.top) {
    var iframes = win.document.getElementsByTagName('iframe');
    if (iframes && iframes.length) {
        var len = iframes.length;
        for (var i = 0; i < len; i++) {
            var userInfo = casp_ioc_GetUserInfo(iframes[i].contentWindow);
            if (userInfo) {
                return userInfo;
            }
        }
    }
    //}
}

/**
 * 获得应用信息
 * @param win
 */
function casp_ioc_GetAppInfo(win) {
    var appId = win.APPID || win.appid,
        appTitle = win.APP_TITLE, appName = win.APPNAME || win.appname;
    // appId未获取到
    if (!appId) {
        // 尝试从WIS_CONFIG中获取
        var wisConfig = win.WIS_CONFIG || {};
        appId = wisConfig.APPID;
        appName = wisConfig.APPNAME;
        appTitle = wisConfig.TITLE;
        // 如果取不到就取不到了，如果取到了，填充其他数据
        if (appId) {
            // 尝试从APP_CONFIG中获取应用标题
            appTitle = appTitle || (win.APP_CONFIG || {}).APP_TITLE || document.title;
        }
    } else {
        // 尝试从WIS_CONFIG中获取名称等信息
        var wisConfig = win.WIS_CONFIG || {};
        appName = appName || wisConfig.APPNAME;
        appTitle = appTitle || wisConfig.TITLE || (win.APP_CONFIG || {}).APP_TITLE || document.title;
    }
    if (appId) {
        return {
            appId: appId,
            appTitle: appTitle,
            appName: appName
        };
    }

    if (win.localStorage && win.localStorage.ampUserId) {
        return {
            appId: win.localStorage.isthirdpartyAppId
        };
    }
    // 向下找一层
    //if (win.self == win.top) {
    var iframes = win.document.getElementsByTagName('iframe');
    if (iframes && iframes.length) {
        var len = iframes.length;
        for (var i = 0; i < len; i++) {
            var appInfo = casp_ioc_GetAppInfo(iframes[i].contentWindow);
            if (appInfo) {
                return appInfo;
            }
        }
    }
    //}

    // 在local storage中获取

}

function casp_ioc_ajax(url, data, success, failure, method, async) {
    if (typeof(method) == "undefined") {
        method = 'post'
    }
    if (typeof(async) == "undefined") {
        async = true;
    }
    var request = null;
    if (window.XDomainRequest) {
        request = new XDomainRequest();
    } else {
        request = new XMLHttpRequest();
    }
    try {
        request.open(method, url, async);
    } catch (e) {
    }
    request.onreadystatechange = function () {
        /* XMLHttpRequest.DONE */
        if (request.readyState === 4) {
            if (request.status === 200) {
                if (typeof success === 'function') {
                    const text = request.responseText;
                    console.info(text);
                    success(text);
                }
            } else if (typeof failure === 'function') {
                failure(request);
            }
        }
    };
    try {
        if (method === 'get') {
            request.send();
        } else {
            request.setRequestHeader('Content-Type', 'application/json');
            request.send(JSON.stringify(data));
        }
    } catch (e) {
        success({});
    }
}

var casp_ioc_appInfo;

function casp_ioc_getAppInfoFromApi(url) {
    var apiUrl = caspIocApiUrl + "appInfo?url=" + url;
    casp_ioc_ajax(apiUrl, null, function (text) {
        try {
            casp_ioc_appInfo = JSON.parse(text).data;
        } catch (e) {
            console.info("获取应用信息异常")
        }

    }, null, 'get', false);
    return casp_ioc_appInfo;
}

var casp_ioc_userInfo;

function casp_ioc_getUserInfoFromApi() {
    var apiUrl = caspIocApiUrl + "userInfo";
    casp_ioc_ajax(apiUrl, null, function (text) {
        try {
            casp_ioc_userInfo = JSON.parse(text).data;
        } catch (e) {
            console.info("获取用户信息异常")
        }

    }, null, 'get', false);
    return casp_ioc_userInfo;

}

function casp_ioc_addLoadEvent(func) {
    var oldonload = window.onload;//得到上一个onload事件的函数
    if (typeof window.onload != 'function') {//判断类型是否为'function',注意typeof返回的是字符串
        window.onload = func;
    } else {
        window.onload = function () {
            oldonload();//调用之前覆盖的onload事件的函数---->由于我对js了解不多,这里我暂时理解为通过覆盖onload事件的函数来实现加载多个函数
            func();//调用当前事件函数
        }
    }
}



function casp_ioc_IEContentLoaded (w, fn) {
    var d = w.document, done = false,
        // only fire once
        init = function () {
            if (!done) {
                done = true;
                fn();
            }
        };
    // polling for no errors
    (function () {
        try {
            // throws errors until after ondocumentready
            d.documentElement.doScroll('left');
        } catch (e) {
            setTimeout(arguments.callee, 50);
            return;
        }
        // no errors, fire

        init();
    })();
    // trying to always fire before onload
    d.onreadystatechange = function() {
        if (d.readyState == 'complete') {
            d.onreadystatechange = null;
            init();
        }
    };
}

function casp_ioc_ready(fn){
    if(document.addEventListener){//兼容非IE
        document.addEventListener("DOMContentLoaded",function(){
            //注销事件，避免反复触发
            document.removeEventListener("DOMContentLoaded",arguments.callee,false);
            fn();//调用参数函数
        },false);
    }else if(document.attachEvent){//兼容IE
        casp_ioc_IEContentLoaded (window, fn);
    }
}

casp_ioc_ready(function () {
    try {
        if (tracker) {
            var url = location.pathname;
            var appInfo = casp_ioc_getAppInfoFromApi(url);
            if (!appInfo || !appInfo.appId) {
                //TODO 获取
                appInfo = casp_ioc_GetAppInfo(window);
            }
            if (appInfo && appInfo.appId) {
                if(!appInfo.clientType){
                    appInfo.clientType = 'pc';
                }
                tracker.load('', appInfo.appId,appInfo.appName,appInfo.clientType);
            }

            var userInfo = casp_ioc_GetUserInfo(window);
            if (!userInfo || !userInfo.userId) {
                userInfo = casp_ioc_getUserInfoFromApi();
            }
            if (userInfo && userInfo.userId) {
                tracker.identify(userInfo.userId, userInfo);
            }
            if (appInfo && appInfo.appId && userInfo && userInfo.userId) {
                tracker.track('访问应用');
            }
        }
    } catch (e) {
        console.error("运营中心应用访问采集异常", e)
    }

});


